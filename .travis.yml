# NB: don't set `language: haskell` here

# th-context requires template-haskell>=2.9, so ghc-7.6 is too old
env:
 - CABALVER=1.18 GHCVER=7.8.3 HAPPYVER=1.19.4 ALEXVER=3.1.3
 - CABALVER=1.22 GHCVER=7.10.1 HAPPYVER=1.19.4 ALEXVER=3.1.3
 - CABALVER=head GHCVER=head HAPPYVER=1.19.4 ALEXVER=3.1.3   # see section about GHC HEAD snapshots

matrix:
  allow_failures:
    - env: CABALVER=1.18 GHCVER=7.8.3 HAPPYVER=1.19.4 ALEXVER=3.1.3
    - env: CABALVER=head GHCVER=head HAPPYVER=1.19.4 ALEXVER=3.1.3

# Note: the distinction between `before_install` and `install` is not important.
before_install:
 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER happy-$HAPPYVER alex-$ALEXVER
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:/opt/happy/$HAPPYVER/bin:/opt/alex/$ALEXVER/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
 - cabal install --only-dependencies --enable-tests --enable-benchmarks

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
 - cabal configure --enable-tests -v2  # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cabal test
 # - cabal check
 - cabal sdist   # tests that a source-distribution can be generated

# The following scriptlet checks that the resulting source distribution can be built & installed
 - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      cabal install --force-reinstalls "$SRC_TGZ";
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi

after_script:
  - cat dist/test/*.log 
